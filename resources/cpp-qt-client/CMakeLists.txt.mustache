cmake_minimum_required(VERSION 3.2)
string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]" APP_VERSION "{{appVersion}}")
string(REGEX REPLACE " " "" TARGET_NAME "{{appName}}")

project("{{appName}}" VERSION ${APP_VERSION} LANGUAGES CXX)

set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)

if (MSVC)
    string(REGEX REPLACE "/W[1-3]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
else ()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-unused-variable")
endif ()

find_package(Qt5Core REQUIRED)
find_package(Qt5Network REQUIRED){{#authMethods}}{{#isOAuth}}
find_package(Qt5Gui REQUIRED){{/isOAuth}}{{/authMethods}}{{#contentCompression}}
find_package(ZLIB REQUIRED){{/contentCompression}}

add_library(client STATIC
{{#models}}
{{#model}}
    {{classname}}.cpp
{{/model}}
{{/models}}
{{#apiInfo}}
{{#apis}}
{{#operations}}
    {{classname}}.cpp
{{/operations}}
{{/apis}}
{{/apiInfo}}
    {{prefix}}Helpers.cpp
    {{prefix}}HttpRequest.cpp
    {{prefix}}HttpFileElement.cpp
    {{prefix}}Oauth.cpp
)
target_include_directories(client PUBLIC
   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
   $<INSTALL_INTERFACE:include/OpenAPI/${TARGET_NAME}>
)

add_library(OpenAPI::${TARGET_NAME} ALIAS client)

target_link_libraries(client PRIVATE Qt5::Core Qt5::Network{{#authMethods}}{{#isOAuth}} Qt5::Gui{{/isOAuth}}{{/authMethods}}{{#contentCompression}} ${ZLIB_LIBRARIES}{{/contentCompression}})


set_target_properties(client PROPERTIES
                CXX_STANDARD 14
                CXX_STANDARD_REQUIRED ON
                CXX_EXTENSIONS OFF
                OUTPUT_NAME ${TARGET_NAME}
                EXPORT_NAME ${TARGET_NAME})

set(HEADER
{{#models}}
{{#model}}
    {{classname}}.h
{{/model}}
{{/models}}
{{#apiInfo}}
{{#apis}}
{{#operations}}
    {{classname}}.h
{{/operations}}
{{/apis}}
{{/apiInfo}}
    {{prefix}}Enum.h
    {{prefix}}Helpers.h
    {{prefix}}HttpRequest.h
    {{prefix}}HttpFileElement.h
    {{prefix}}Oauth.h
    {{prefix}}Object.h
)
install(FILES ${HEADER} DESTINATION include/OpenAPI/${TARGET_NAME})
install(TARGETS client EXPORT ${TARGET_NAME}Config RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)
install(EXPORT ${TARGET_NAME}Config DESTINATION lib/cmake/${TARGET_NAME} NAMESPACE OpenAPI::)
